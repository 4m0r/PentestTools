#!/usr/bin/env python3

import argparse
import os
import socket
import sys
import threading
import tqdm

# Color Settings
RED     = "\033[31m"
GREEN   = "\033[32m"
YELLOW  = "\033[33m"
BLUE    = "\033[34m"
PURPLE  = "\033[35m"
RESET   = "\033[0m"
BUFF_SZ = 4096


def getArgs ():

    parser = argparse.ArgumentParser (description = RED + "Transfer Files between systems through socket" + RESET)
    parser.add_argument ('-l', "--listen", dest = "listen", action = "store_true",
                         help = YELLOW + "Listen Mode" + RESET)
    parser.add_argument ('-t', "--target", dest = "target", action = "store",
                         help = YELLOW + "Target IP address" + RESET)
    parser.add_argument ('-u', "--upload", dest = "upload", action = "store", help = YELLOW + "Upload File" + RESET)
    parser.add_argument ('-d', "--download", dest = "download", action = "store",
                         help = YELLOW + "Download File" + RESET)
    parser.add_argument ("port", action = "store", help = YELLOW + "Port Address" + RESET, type = int)
    args = parser.parse_args ()

    # Check Args
    if args.upload and args.download:
        parser.error (RED + "[!] Upload and Download cannot be clubbed together" + RESET)
        sys.exit (1)
    if not args.listen and not args.target:
        parser.error (RED + "[!] Target mandatory in client mode" + RESET)

    return args


def uploadFile (sock, upload):

    fileSize = os.path.getsize (upload)
    sock.send (f"{fileSize}".encode())
    progress = tqdm.tqdm (range(fileSize), f"Sending {GREEN}{upload}{RESET}", unit="B", unit_scale=True,
                          unit_divisor=BUFF_SZ)
    with open (upload, "rb") as file:
        while True:
            temp = file.read (BUFF_SZ)
            if not temp:
                break
            sock.send (temp)
            progress.update (len(temp))

    sock.close ()


def downloadFile (sock, download):

    fileSize = sock.recv (BUFF_SZ).decode()
    fileSize = int (fileSize)
    progress = tqdm.tqdm (range(fileSize), f"Receiving {GREEN}{download}{RESET}", unit="B", unit_scale=True,
                          unit_divisor=BUFF_SZ)
    with open (download, "wb") as file:
        while True:
            temp = sock.recv (BUFF_SZ)
            if not temp:
                break
            file.write (temp)
            progress.update (len(temp))

    sock.close ()


def runOperation (sock, upload, download):

    if upload:
        uploadFile (sock, upload)
    if download:
        downloadFile (sock, download)


def serverMode (target, upload, download, port):

    if not target:
        target = "0.0.0.0"

    server = socket.socket (socket.AF_INET, socket.SOCK_STREAM)

    try:
        server.bind((target, port))
        server.listen(5)
        while True:
            client, address = server.accept()
            print (GREEN + f"[+] Connection from {BLUE}{address[0]}{GREEN}:{BLUE}{address[1]}" + RESET)
            runOperation (client, upload, download)
    except socket.error:
        print (RED + f"[!] Binding on {BLUE}{target}{RED}:{BLUE}{port}{RED} failed. Check for existing sockets and "
                     f"port permissions" + RESET)
        sys.exit (1)


def clientMode (target, upload, download, port):

    client = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect ((target, port))
        print (GREEN + f"[+] Connected to {BLUE}{target}{GREEN}:{BLUE}{port}" + RESET)
        clientThread = threading.Thread (target = runOperation, args = (client, upload, download))
    except socket.error:
        print (RED + f"[!] Connecting to {BLUE}{target}{RED}:{BLUE}{port}{RED}. Check if the server is running" + RESET)
        sys.exit (1)


def main ():

    args = getArgs ()
    listen = args.listen
    target = args.target
    upload = args.upload
    download = args.download
    port = args.port

    if listen:
        serverMode (target, upload, download, port)
    else:
        clientMode (target, upload, download, port)


if __name__ == "__main__":

    main ()